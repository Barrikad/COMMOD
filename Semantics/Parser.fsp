%{
    open Types
%}

%token <string> ID
%token <System.Int32> INT
%token IF FI DO OD SKIP FALSE TRUE ASSIGN ARROW LESSEQ GREATEQ NOTEQ EQUAL ANDSC ORSC AND OR PLUS TIMES DIV POW NOT LESS GREAT PSTART PEND BSTART BEND SEMI MINUS UMINUS ELSE ELSEPREC EOF SYNTAXERROR ERROR

%left EQUAL LESSEQ GREATEQ LESS GREAT

%left PLUS MINUS
%left TIMES DIV
%right POW
%right TEMP

%left OR ORSC
%left AND ANDSC
%right NOT

%right ELSEPREC
%right SEMI

%start start
%type <Command> start
%type <Command> Command
%type <GCommand> GCommand
%type <Arithm> Arithm
%type <Boolean> Boolean

%%
start: Command EOF { $1 }

Command : ID ASSIGN Arithm                    { Assign($1,$3) }
        | ID BSTART Arithm BEND ASSIGN Arithm { ArrAssign($1,$3,$6) }
        | SKIP                                { Skip }
        | Command SEMI Command                { Coms($1,$3) }
        | IF GCommand FI                      { If($2) }
        | DO GCommand OD                      { Do($2) }

        | GCommand SEMI Command { Coms(CError("Expected Command not GCommand"),$3) }
        | Command SEMI GCommand { Coms($1,CError("Expected Command not GCommand")) }
        | Arithm SEMI Command   { Coms(CError("Expected Command not Arithmetic"),$3) }
        | Command SEMI Arithm   { Coms($1,CError("Expected Command not Arithmetic")) }
        | Boolean SEMI Command  { Coms(CError("Expected Command not Boolean"),$3) }
        | Command SEMI Boolean  { Coms($1,CError("Expected Command not Boolean")) }
        | Command SEMI          { Coms($1,CError("Expected Command not nothing")) }

        | IF Command FI         { CError("Expected GCommand not Command") }
        | IF Boolean FI         { CError("Expected GCommand not Boolean") }
        | IF Arithm FI          { CError("Expected GCommand not Arithmetic") }
        | DO Command OD         { CError("Expected GCommand not Command") }
        | DO Boolean OD         { CError("Expected GCommand not Boolean") }
        | DO Arithm OD          { CError("Expected GCommand not Arithmetic") }

        | IF GCommand           { CError("Expected FI") }
        | DO GCommand           { CError("Expected OD") }
        


GCommand : Boolean ARROW Command         { Gives($1,$3) }
         | GCommand ELSE GCommand        { Else($1,$3) }

         | Arithm ARROW Command        { GError("Expected Boolean not Arithmetic")}
         | Boolean ARROW Arithm        { GError("Expected Command not Arithmetic")}
         | Command ARROW Command       { GError("Expected Boolean not Command")}
         | GCommand ARROW Command      { GError("Expected Boolean not GCommand")}
         | Boolean ARROW GCommand      { GError("Expected Command not GCommand")}
         | Boolean ARROW Boolean       { GError("Expected Command not Boolean")}
         | Command BSTART BEND Command { GError("Expected GCommand not Command") }
         | Boolean BSTART BEND Boolean { GError("Expected GCommand not Boolean") }
         | Arithm BSTART BEND Arithm   { GError("Expected GCommand not Arithmetic") }


Arithm : INT                     { Int($1) }
       | ID                      { Var($1) }
       | ID BSTART Arithm BEND   { Arr($1,$3) }
       | Arithm PLUS Arithm      { Plus($1,$3) }
       | Arithm MINUS Arithm     { Minus($1,$3) }
       | MINUS Arithm %prec TEMP { Neg($2) }
       | Arithm TIMES Arithm     { Times($1,$3) }
       | Arithm DIV Arithm       { Div($1,$3) }
       | Arithm POW Arithm       { Pow($1,$3) }
       | PSTART Arithm PEND      { $2 }

       | ID BSTART Boolean BEND { AError("Expected Arithmetic not Boolean") }
       | MINUS Boolean          { AError("Expected Arithmetic not Boolean") }

       | Boolean PLUS Boolean   { AError("Expected Arithmetic not Boolean") }
       | Boolean MINUS Boolean  { AError("Expected Arithmetic not Boolean") }
       | Boolean TIMES Boolean  { AError("Expected Arithmetic not Boolean") }
       | Boolean DIV Boolean    { AError("Expected Arithmetic not Boolean") }
       | Boolean POW Boolean    { AError("Expected Arithmetic not Boolean") }
       | Arithm PLUS Boolean    { AError("Expected Arithmetic not Boolean") }
       | Arithm MINUS Boolean   { AError("Expected Arithmetic not Boolean") }
       | Arithm TIMES Boolean   { AError("Expected Arithmetic not Boolean") }
       | Arithm DIV Boolean     { AError("Expected Arithmetic not Boolean") }
       | Arithm POW Boolean     { AError("Expected Arithmetic not Boolean") }
       | Boolean PLUS Arithm    { AError("Expected Arithmetic not Boolean") }
       | Boolean MINUS Arithm   { AError("Expected Arithmetic not Boolean") }
       | Boolean TIMES Arithm   { AError("Expected Arithmetic not Boolean") }
       | Boolean DIV Arithm     { AError("Expected Arithmetic not Boolean") }
       | Boolean POW Arithm     { AError("Expected Arithmetic not Boolean") }

Boolean : TRUE                  { True }
        | FALSE                 { False }
        | Boolean AND Boolean   { And($1,$3) }
        | Boolean OR Boolean    { Or($1,$3) }
        | Boolean ANDSC Boolean { AndSC($1,$3) }
        | Boolean ORSC Boolean  { OrSC($1,$3) }
        | NOT Boolean           { Not($2) }
        | Arithm EQUAL Arithm   { Equal($1,$3) }
        | Arithm NOTEQ Arithm   { Not(Equal($1,$3)) }
        | Arithm GREAT Arithm   { Greater($1,$3) }
        | Arithm LESS Arithm    { Lesser($1,$3) }
        | Arithm GREATEQ Arithm { Or(Greater($1,$3),Equal($1,$3)) }
        | Arithm LESSEQ Arithm  { Or(Lesser($1,$3),Equal($1,$3)) }
        | PSTART Boolean PEND   { $2 }

        | Boolean EQUAL Boolean   { BError("Expected Arithmetic not Boolean") }
        | Boolean NOTEQ Boolean   { BError("Expected Arithmetic not Boolean") }
        | Boolean GREAT Boolean   { BError("Expected Arithmetic not Boolean") }
        | Boolean LESS Boolean    { BError("Expected Arithmetic not Boolean") }
        | Boolean GREATEQ Boolean { BError("Expected Arithmetic not Boolean") }
        | Boolean LESSEQ Boolean  { BError("Expected Arithmetic not Boolean") }
        | Arithm EQUAL Boolean    { BError("Expected Arithmetic not Boolean") }
        | Arithm NOTEQ Boolean    { BError("Expected Arithmetic not Boolean") }
        | Arithm GREAT Boolean    { BError("Expected Arithmetic not Boolean") }
        | Arithm LESS Boolean     { BError("Expected Arithmetic not Boolean") }
        | Arithm GREATEQ Boolean  { BError("Expected Arithmetic not Boolean") }
        | Arithm LESSEQ Boolean   { BError("Expected Arithmetic not Boolean") }
        | Boolean EQUAL Arithm    { BError("Expected Arithmetic not Boolean") }
        | Boolean NOTEQ Arithm    { BError("Expected Arithmetic not Boolean") }
        | Boolean GREAT Arithm    { BError("Expected Arithmetic not Boolean") }
        | Boolean LESS Arithm     { BError("Expected Arithmetic not Boolean") }
        | Boolean GREATEQ Arithm  { BError("Expected Arithmetic not Boolean") }
        | Boolean LESSEQ Arithm   { BError("Expected Arithmetic not Boolean") }

        | NOT Arithm            { BError("Expected Boolean not Arithmetic") }
        | Arithm AND Arithm    { BError("Expected Boolean not Arithmetic") }
        | Arithm OR Arithm     { BError("Expected Boolean not Arithmetic") }
        | Arithm ANDSC Arithm  { BError("Expected Boolean not Arithmetic") }
        | Arithm ORSC Arithm   { BError("Expected Boolean not Arithmetic") }
        | Arithm AND Boolean   { BError("Expected Boolean not Arithmetic") }
        | Arithm OR Boolean    { BError("Expected Boolean not Arithmetic") }
        | Arithm ANDSC Boolean { BError("Expected Boolean not Arithmetic") }
        | Arithm ORSC Boolean  { BError("Expected Boolean not Arithmetic") }
        | Boolean AND Arithm   { BError("Expected Boolean not Arithmetic") }
        | Boolean OR Arithm    { BError("Expected Boolean not Arithmetic") }
        | Boolean ANDSC Arithm { BError("Expected Boolean not Arithmetic") }
        | Boolean ORSC Arithm  { BError("Expected Boolean not Arithmetic") }

%%
